
Create a Student Master database with a collection called “Student” containing
documents with some or all of the following fields: StudentRollNo, StudentName,
Grade, Hobbies, and DOJ.
Perform the following operations on the database:

......14-10-2025......txt

---------------------------------------------------------------------
k) Find those documents where the student name begins with ‘M’.

> db.Student.find({StudName:{$regex:"^M"}}); // all record that StudName starting from M, ^ -> starting with
{ "_id" : 3, "Rollno" : 3, "StudName" : "Maukesh", "Grade" : "IVV", "Hobbies" : "Music", "Doj" : "01/01/2020" }

### extra
> db.Student.find({StudName:{$regex:/^M/}}); // same work with -> / /
{ "_id" : 3, "Rollno" : 3, "StudName" : "Maukesh", "Grade" : "IVV", "Hobbies" : "Music", "Doj" : "01/01/2020" }

> db.Student.find({StudName:{$regex:"^P"}});
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020" }
{ "_id" : 9, "Rollno" : 9, "StudName" : "Parth", "Grade" : "VI", "Hobbies" : "Music", "Doj" : "16/01/2020" }

> db.Student.find({StudName:{$regex:"^p"}});
{ "_id" : 8, "Rollno" : 8, "StudName" : "poojan", "Grade" : "IVV", "Hobbies" : "Typing", "Doj" : "25/03/2020" }

> db.Student.find({StudName:{$regex:"^p", $options: "i"}}); // ignored case-sensitivity
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020" }
{ "_id" : 8, "Rollno" : 8, "StudName" : "poojan", "Grade" : "IVV", "Hobbies" : "Typing", "Doj" : "25/03/2020" }
{ "_id" : 9, "Rollno" : 9, "StudName" : "Parth", "Grade" : "VI", "Hobbies" : "Music", "Doj" : "16/01/2020" }

---------------------------------------------------------------------
l) Find those documents where the student name has an “e” in any position.

> db.Student.find({StudName:{$regex:"e"}});
{ "_id" : 3, "Rollno" : 3, "StudName" : "Maukesh", "Grade" : "IVV", "Hobbies" : "Music", "Doj" : "01/01/2020" }
{ "_id" : 5, "Rollno" : 5, "StudName" : "Ramesh", "Grade" : "VII", "Hobbies" : "Chess", "Doj" : "16/01/2021" }
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020" }
{ "_id" : 7, "Rollno" : 7, "StudName" : "Sangeeta", "Grade" : "VI", "Hobbies" : "Running", "Doj" : "26/07/2020" }
>
---------------------------------------------------------------------
m) Find those documents where the student name ends in “a”.

> db.Student.find({StudName:{$regex:"a$"}}); // $ -> ending with
{ "_id" : 4, "Rollno" : 4, "StudName" : "Anuradha", "Grade" : "IVV", "Hobbies" : "Reading", "Doj" : "16/05/2020" }
{ "_id" : 7, "Rollno" : 7, "StudName" : "Sangeeta", "Grade" : "VI", "Hobbies" : "Running", "Doj" : "26/07/2020" }

---------------------------------------------------------------------
n) Find total number of documents.
---------------------------------------------------------------------
o) Find total number of documents where Grade is ‘VII’.
---------------------------------------------------------------------
p) Sort the documents in ascending order of student name.

> db.Student.find().sort({StudName:1})
{ "_id" : 11, "Rollno" : 11, "StudName" : "Akhay", "Grade" : "IV", "Hobbies" : "Chess", "Doj" : "16/02/2021" }
{ "_id" : 4, "Rollno" : 4, "StudName" : "Anuradha", "Grade" : "IVV", "Hobbies" : "Reading", "Doj" : "16/05/2020" }
{ "_id" : 2, "Rollno" : 2, "StudName" : "Jay", "Grade" : "IV", "Hobbies" : "Reading", "Doj" : "16/01/2020" }
{ "_id" : 3, "Rollno" : 3, "StudName" : "Maukesh", "Grade" : "IVV", "Hobbies" : "Music", "Doj" : "01/01/2020" }
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020" }
{ "_id" : 9, "Rollno" : 9, "StudName" : "Parth", "Grade" : "VI", "Hobbies" : "Music", "Doj" : "16/01/2020" }
{ "_id" : 5, "Rollno" : 5, "StudName" : "Ramesh", "Grade" : "VII", "Hobbies" : "Chess", "Doj" : "16/01/2021" }
{ "_id" : 7, "Rollno" : 7, "StudName" : "Sangeeta", "Grade" : "VI", "Hobbies" : "Running", "Doj" : "26/07/2020" }
{ "_id" : 10, "Rollno" : 10, "StudName" : "Vihan", "Grade" : "IV", "Hobbies" : "Reading", "Doj" : "16/02/2021" }
{ "_id" : 8, "Rollno" : 8, "StudName" : "poojan", "Grade" : "IVV", "Hobbies" : "Typing", "Doj" : "25/03/2020" }
{ "_id" : 1, "Rollno" : 1, "StudName" : "vijay", "Grade" : "IV", "Hobbies" : "Dancing", "Doj" : "22/05/2020" }

---------------------------------------------------------------------
q) Display the last two records

> db.Student.find().sort({_id:-1}).limit(2)
{ "_id" : 11, "Rollno" : 11, "StudName" : "Akhay", "Grade" : "IV", "Hobbies" : "Chess", "Doj" : "16/02/2021" }
{ "_id" : 10, "Rollno" : 10, "StudName" : "Vihan", "Grade" : "IV", "Hobbies" : "Reading", "Doj" : "16/02/2021" }

---------------------------------------------------------------------

=============================================================

Create a Movie_Maker database with a collection called “Movie“ containing documents with some or all of the following fields: titles, directors, years, actors.
Perform the following operations on the database:
use movie_maker
db.createCollection("movie")
---------------------------------------------------------------
db.Student.insert( {_id:1,Rollno:1,StudName:"vijay",Grade:"IV",Hobbies:"Dancing",Doj:"22/05/2020"});
db.Student.insert( {_id:2,Rollno:2,StudName:"Jay",Grade:"IV",Hobbies:"Reading",Doj:"16/01/2020"});
db.Student.insert( {_id:3,Rollno:3,StudName:"Maukesh",Grade:"IVV",Hobbies:"Music",Doj:"01/01/2020"});
db.Student.insert( {_id:4,Rollno:4,StudName:"Anuradha",Grade:"IVV",Hobbies:"Reading",Doj:"16/05/2020"});
db.Student.insert( {_id:5,Rollno:5,StudName:"Ramesh",Grade:"VII",Hobbies:"Chess",Doj:"16/01/2021"});
db.Student.insert( {_id:6,Rollno:6,StudName:"Paresh",Grade:"VII",Hobbies:"Dancing",Doj:"27/12/2020"});
db.Student.insert( {_id:7,Rollno:7,StudName:"Sangeeta",Grade:"VI",Hobbies:"Running",Doj:"26/07/2020"});
db.Student.insert( {_id:8,Rollno:8,StudName:"poojan",Grade:"IVV",Hobbies:"Typing",Doj:"25/03/2020"});
db.Student.insert( {_id:9,Rollno:9,StudName:"Parth",Grade:"VI",Hobbies:"Music",Doj:"16/01/2020"});
db.Student.insert( {_id:10,Rollno:10,StudName:"Vihan",Grade:"IV",Hobbies:"Reading",Doj:"16/02/2021"});
db.Student.insert( {_id:11,Rollno:11,StudName:"Akhay",Grade:"IV",Hobbies:"Chess",Doj:"16/02/2021"});

---------------------------------------------------------------------
a) Retrieve all documents.

> db.movie.find().pretty()
{
        "_id" : 1,
        "title" : "Fight Club",
        "writer" : "Chuck Palahniuk",
        "year" : 1999,
        "actors" : [
                "Brad Pitt",
                "Edward Norton"
        ]
}
{
        "_id" : 2,
        "title" : "Pulp Fiction",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "John Travolta",
                "Uma Thurman"
        ]
}
{
        "_id" : 3,
        "title" : "Inglorious Hero",
        "writer" : "Quentin Tarantino",
        "year" : 2009,
        "actors" : [
                "Brad Pitt",
                "Diane Kruger",
                "Eli Roth"
        ]
}
{
        "_id" : 4,
        "title" : "The Hobbit: An unexpected Journey",
        "writer" : "J.R.R. Tolkein",
        "year" : 2012,
        "franchise" : "The Hobbit"
}
{
        "_id" : 5,
        "title" : "The Hobbit: The Desolation of Smaug",
        "writer" : "J.R.R Tolkien",
        "year" : 2013,
        "franchise" : "The Hobbit"
}
{
        "_id" : 6,
        "title" : "The Hobbit: The Battle of the Five Armies",
        "writer" : "J.R.R Tolkien",
        "year" : 2002,
        "franchise" : "The Hobbit",
        "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
{ "_id" : 7, "title" : "Pee Wee Herman's Big Adventures" }
{ "_id" : 8, "title" : "Avatar" }

---------------------------------------------------------------------
b) Retrieve all documents with writer set to "Quentin Tarantino".

> db.movie.find({writer:{$regex:"Quentin Tarantino", $options:"i"}})
{ "_id" : 2, "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "John Travolta", "Uma Thurman" ] }
{ "_id" : 3, "title" : "Inglorious Hero", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

---------------------------------------------------------------------
c) Retrieve all documents where actors include "Brad Pitt".

> db.movie.find({actors:{$regex:"Brad Pitt", $options:"i"}})
{ "_id" : 1, "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : 3, "title" : "Inglorious Hero", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }

---------------------------------------------------------------------
d) Retrieve all movies released before the year 2000 or after 2010.

db.movie.find({year:{$lte:2000}})
db.movie.find({year:{$gte:2010}})
> db.movie.find({$or:[{year:{$lte:2000}}, {year:{$gte:2010}}]})
{ "_id" : 1, "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit" }
{ "_id" : 5, "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : 2013, "franchise" : "The Hobbit" }

---------------------------------------------------------------------
e) Add a synopsis to "The Hobbit: An Unexpected Journey”: "A reluctant hobbit,
Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves
to reclaim their mountain home - and the gold within it - from the dragon
Smaug."

> db.movie.find({title:"The Hobbit: An unexpected Journey"});
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit" }

> db.movie.update({title:{$regex:"The Hobbit: An unexpected Journey", $options:"i"}},{$set:{synopsis:"A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.movie.find({title:"The Hobbit: An unexpected Journey"});
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }

---------------------------------------------------------------------
f) Add a synopsis to "The Hobbit: The Desolation of Smaug”: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."

> db.movie.update({title:{$regex:"The Hobbit: The Desolation of Smaug", $options:"i"}},{$set:{synopsis:"The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

---------------------------------------------------------------------
g) Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"

> db.movie.update({title:${regex:"Pulp Fiction", $options:"i"}},{$push:{actors:"Samuel L. Jackson"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

> db.movie.find({title:"Pulp Fiction"});
{ "_id" : 2, "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "John Travolta", "Uma Thurman", "Samuel L. Jackson" ] }

---------------------------------------------------------------------
h) Find all movies that have a synopsis that contains the word "Bilbo".

> db.movie.find({synopsis:{$regex:"Bilbo"}})
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
{ "_id" : 5, "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
{ "_id" : 6, "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : 2002, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }

---------------------------------------------------------------------
i) Find all movies that have a synopsis that contains the word "Gandalf".

> db.movie.find({synopsis:{$regex:"Gandalf"}})
{ "_id" : 5, "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }

---------------------------------------------------------------------
j) Find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf".

db.movie.find({synopsis:{$regex:"Bilbo"}})
db.movie.find({synopsis:{$not:/Gandalf/}}); 
db.movie.find({$and:[{synopsis:{$regex:"Bilbo"}},{synopsis:{$not:/Gandalf/}}]}); 

> db.movie.find({$and:[{synopsis:{$regex:"Bilbo"}},{synopsis:{$not:/Gandalf/}}]});
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
{ "_id" : 6, "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : 2002, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }

---------------------------------------------------------------------
k) Find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

> db.movie.find({$or:[{synopsis:{$regex:"dwarves", $options:"i"}},{synopsis:{$regex:"hobbit", $options:"i"}}]});
{ "_id" : 4, "title" : "The Hobbit: An unexpected Journey", "writer" : "J.R.R. Tolkein", "year" : 2012, "franchise" : "The Hobbit", "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
{ "_id" : 5, "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }

---------------------------------------------------------------------
l) Find all movies that have a synopsis that contains the word "gold" or "dragon".

> db.movie.find({$and:[{synopsis:{$not:/gold/}},{synopsis:{$not:/dragon/}}]});
{ "_id" : 1, "title" : "Fight Club", "writer" : "Chuck Palahniuk", "year" : 1999, "actors" : [ "Brad Pitt", "Edward Norton" ] }
{ "_id" : 2, "title" : "Pulp Fiction", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "John Travolta", "Uma Thurman", "Samuel L. Jackson" ] }
{ "_id" : 3, "title" : "Inglorious Hero", "writer" : "Quentin Tarantino", "year" : 2009, "actors" : [ "Brad Pitt", "Diane Kruger", "Eli Roth" ] }
{ "_id" : 5, "title" : "The Hobbit: The Desolation of Smaug", "writer" : "J.R.R Tolkien", "year" : 2013, "franchise" : "The Hobbit", "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
{ "_id" : 6, "title" : "The Hobbit: The Battle of the Five Armies", "writer" : "J.R.R Tolkien", "year" : 2002, "franchise" : "The Hobbit", "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness." }
{ "_id" : 7, "title" : "Pee Wee Herman's Big Adventures" }
{ "_id" : 8, "title" : "Avatar" }

---------------------------------------------------------------------
m) Delete the movie "Pee Wee Herman's Big Adventure”

> db.movie.find({title:{$regex:"Pee Wee Herman's Big Adventure"}})
{ "_id" : 7, "title" : "Pee Wee Herman's Big Adventures" }

> db.movie.remove({title:{$regex:"Pee Wee Herman's Big Adventure"}})
WriteResult({ "nRemoved" : 1 })

> db.movie.find({title:{$regex:"Pee Wee Herman's Big Adventure"}})

---------------------------------------------------------------------

=============================================================
6.	Create “Mymenu” database with a collection called “Restaurants”, containing documents with some or all of the following fields: Restaurant Id, Restaurant Name, Grades (Note: An array is expected), Cuisine, Address (Note: Must include Building Name, Street, Area, City, ZipCode), and Date of Establishment (Note: Use Proper Date format), Score and Rating. Perform the following operations on the database. (Insert at least 10 documents)
    1. Find the Restaurant Names, who have established after January 2010.
    2. Find the restaurants that do not prepare Cuisine of “American”, and their Score is more than 70.
    3. Update the Rating of the restaurant “Mirch Masala”.
    4. Display the restaurants, which are located in “Ahmedabad”.
    5. Find the Restaurant Names and Cuisine, for those restaurants which contain ‘chen’ (Example: “Kitchen”) as the last three letters.
    6. Find the Restaurant Id’s and Restaurant Names of those restaurants, which are situated in “Ahmedabad” (City) but not in “ISKON” (Area).
    7. Add a field “Borough” with value “Bronx”, for restaurants with _id: 3 and 4.
    8. Remove the field Cuisine for restaurants whose name is “Jassi De Paratha”.
    9. Remove the document, with restaurant named “Barbeque Nation”.


db.Restaurants.insert({ "_id" : 1, "RestaurantId" : 1, "RestaurantName" : "Mirch Masala", "Grades" : [ "A", "A+" ], "Cuisine" : "Kitchen King", "Address" : [ { "BuildingName" : "Himalaya","Street" : "Vastrapur","Area" : "Vastrapur Lake", "City" : "Ahmedabad","ZipCode" : 380052 } ],"DateofEstablishment" : "1-Jan-2008", "Score" : 90, "Rating" : 4.9 });
db.Restaurants.insert({ "_id" : 2, "RestaurantId" : 2, "RestaurantName" : "Jassi De Parathe", "Grades" : [ "A" ], "Cuisine" : "Kitchen Masala", "Address" : [ { "BuildingName" : "Sarkhej", "Street" : "Maninagar", "Area" : "Kankaria Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 });
db.Restaurants.insert({ "_id" : 3, "RestaurantId" : 4, "RestaurantName" : "Nini's Kitchen", "Grades" : [ "A" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Saket-II", "Street" : "Abc", "Area" : "Science City", "City" : "Baroda", "ZipCode" : 380051 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 });
db.Restaurants.insert({ "_id" : 4, "RestaurantId" : 3, "RestaurantName" : "Barbeque Nation", "Grades" : [ "C" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Memnagar", "Street" : "Maninagar", "Area" : "Iskon", "City" : "Surat", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 });
db.Restaurants.insert({ "_id" : 5, "RestaurantId" : 5, "RestaurantName" : "Nini's Kitchen", "Grades" : [ "A" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Saket-II", "Street" : "Abc", "Area" : "Science City", "City" : "Baroda", "ZipCode" : 380051 } ], "DateofEstablishment" : "1-Jan-2024", "Score" : 40, "Rating" : 3.9 });

> db.Restaurants.find()
{ "_id" : 1, "RestaurantId" : 1, "RestaurantName" : "Mirch Masala", "Grades" : [ "A", "A+" ], "Cuisine" : "Kitchen King", "Address" : [ { "BuildingName" : "Himalaya", "Street" : "Vastrapur", "Area" : "Vastrapur Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 90, "Rating" : 4.9 }
{ "_id" : 2, "RestaurantId" : 2, "RestaurantName" : "Jassi De Parathe", "Grades" : [ "A" ], "Cuisine" : "Kitchen Masala", "Address" : [ { "BuildingName" : "Sarkhej", "Street" : "Maninagar", "Area" : "Kankaria Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 }
{ "_id" : 3, "RestaurantId" : 4, "RestaurantName" : "Nini's Kitchen", "Grades" : [ "A" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Saket-II", "Street" : "Abc", "Area" : "Science City", "City" : "Baroda", "ZipCode" : 380051 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 }
{ "_id" : 4, "RestaurantId" : 3, "RestaurantName" : "Barbeque Nation", "Grades" : [ "C" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Memnagar", "Street" : "Maninagar", "Area" : "Iskon", "City" : "Surat", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 }
{ "_id" : 5, "RestaurantId" : 5, "RestaurantName" : "Nini's Kitchen", "Grades" : [ "A" ], "Cuisine" : "Multi Cuisine", "Address" : [ { "BuildingName" : "Saket-II", "Street" : "Abc", "Area" : "Science City", "City" : "Baroda", "ZipCode" : 380051 } ], "DateofEstablishment" : "1-Jan-2024", "Score" : 40, "Rating" : 3.9 }
>

---------------------------------------------------------------------
1. Find the Restaurant Names, who have established on 1st January 2024.

> db.Restaurants.find({DateofEstablishment:"1-Jan-2024"},{RestaurantName:1})
{ "_id" : 5, "RestaurantName" : "Nini's Kitchen" }

---------------------------------------------------------------------
2. Find the restaurants that do not prepare Cuisine of “American”, and their Score is more than 70.

> db.Restaurants.find({$and:[{Cuisine:{$nin:["American"]}},{Score:{$gt:70}}]})
{ "_id" : 1, "RestaurantId" : 1, "RestaurantName" : "Mirch Masala", "Grades" : [ "A", "A+" ], "Cuisine" : "Kitchen King", "Address" : [ { "BuildingName" : "Himalaya", "Street" : "Vastrapur", "Area" : "Vastrapur Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 90, "Rating" : 4.9 }

---------------------------------------------------------------------
3. Update the Rating of the restaurant “Mirch Masala”.

> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 4.9 }
> db.Restaurants.update({RestaurantName:"Mirch Masala"},{$set:{Rating:4.8}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 4.8 }
> db.Restaurants.update({RestaurantName:"Mirch Masala"},{$inc:{Rating:0.5}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 5.3 }
> db.Restaurants.update({RestaurantName:"Mirch Masala"},{$inc:{Rating:-1.5}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 3.8 }
> db.Restaurants.update({RestaurantName:"Mirch Masala"},{$inc:{Rating:1.1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 4.9 }
> db.Restaurants.update({RestaurantName:"Mirch Masala"},{$inc:{Rating:0.1}}); // changeing Rating
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.Restaurants.find({RestaurantName:"Mirch Masala"},{Rating:1});
{ "_id" : 1, "Rating" : 5 }
>

---------------------------------------------------------------------
4. Display the restaurants, which are located in “Ahmedabad”.

> db.Restaurants.find({"Address.City":"Ahmedabad"})
{ "_id" : 1, "RestaurantId" : 1, "RestaurantName" : "Mirch Masala", "Grades" : [ "A", "A+" ], "Cuisine" : "Kitchen King", "Address" : [ { "BuildingName" : "Himalaya", "Street" : "Vastrapur", "Area" : "Vastrapur Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 90, "Rating" : 5 }
{ "_id" : 2, "RestaurantId" : 2, "RestaurantName" : "Jassi De Parathe", "Grades" : [ "A" ], "Cuisine" : "Kitchen Masala", "Address" : [ { "BuildingName" : "Sarkhej", "Street" : "Maninagar", "Area" : "Kankaria Lake", "City" : "Ahmedabad", "ZipCode" : 380052 } ], "DateofEstablishment" : "1-Jan-2008", "Score" : 40, "Rating" : 3.9 }

---------------------------------------------------------------------
5. Find the Restaurant Names and Cuisine, for those restaurants which contain ‘chen’ (Example: “Kitchen”) as the last three letters.
---------------------------------------------------------------------
6. Find the Restaurant Id’s and Restaurant Names of those restaurants, which are situated in “Ahmedabad” (City) but not in “ISKON” (Area).
---------------------------------------------------------------------
7. Add a field “Borough” with value “Bronx”, for restaurants with _id: 3 and 4.
---------------------------------------------------------------------
8. Remove the field Cuisine for restaurants whose name is “Jassi De Paratha”.
---------------------------------------------------------------------
9. Remove the document, with restaurant named “Barbeque Nation”.
---------------------------------------------------------------------
