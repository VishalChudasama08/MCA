2. 	Create a new MongoDB database called “TEACHER”. 
Within “TEACHER” database, create a collection named “TEACHER_MASTER”. 
Assume an appropriate Schema consisting of fields like Name, Age, Subject(array), DOB, Gender, Salary, City 
1. Insert 7 documents into the above collection. 
2. Display Name, Subject, Gender and Salary. 
3. Display teacher, which are from the city “Ahmedabad”. 
4. Display the teacher id, name, city and DOB. 
5. Display the teachers whose gender is female and teach either “Hindi” or “English” subject. 
6. Update all those documents where name of teacher is “Anil” with the new value of subject as “English”. 
7. Delete data of all those teachers who were born on date 1st January 1980. 
8. Remove field age. 
9. Display the teachers that do not teach “English” subject and their salary is more than 30000. 
10. Find all the teachers having gender “Male” and display salary for them. 

=============================================================

-------------------------------------------------------------
6. Update all those documents where name of teacher is “Anil” with the new value of subject as “English”. 
###
db.TEACHER_MASTER.updateMany({Name:"Anil"},{})

-------------------------------------------------------------
7. Delete data of all those teachers who were born on date 1st January 1980.
###
db.TEACHER_MASTER.find({DOB:"01/01/1980"})
###
db.TEACHER_MASTER.remove({DOB:"01/01/1980"})

> db.TEACHER_MASTER.remove({DOB:"01/01/1980"})
WriteResult({ "nRemoved" : 1 })

-------------------------------------------------------------
8. Remove field age. 
###
db.TEACHER_MASTER.update({},{$unset:{Age:""}}); // update one row only / delete age column from one row

###
db.TEACHER_MASTER.updateMany({},{$unset:{Age:""}}); // update all rows / delete age column from all rows

> db.TEACHER_MASTER.updateMany({},{$unset:{Age:""}})
{ "acknowledged" : true, "matchedCount" : 7, "modifiedCount" : 7 }
>
-------------------------------------------------------------
9. Display the teachers that do not teach “English” subject and their salary is more than 30000. 
###
db.TEACHER_MASTER.find({
    Subject:{$nin:["English"]},
    Salary:{$gt:30000}
})

> db.TEACHER_MASTER.find({Subject:{$nin:["English"]},Salary:{$gt:30000}})
{ "_id" : 2, "Name" : "Vishal", "Age" : 23, "Subject" : [ "Hindi", "Gujarati", "Java" ], "DOB" : "11/10/2025", "Gender" : "Male", "Salary" : 80008, "City" : "Dwarka" }
{ "_id" : 4, "Name" : "Xyz", "Age" : 31, "Subject" : [ "C", "MongoDB", "Java" ], "DOB" : "01/08/1990", "Gender" : "Female", "Salary" : 70000, "City" : "Ahemdabad" }
>

=============================================================

3.	Create a new MongoDB database called “EMPLOYEE”.
    Within “EMPLOYEE” database, create a collection named EMPLOYEE_MASTER”
    assume an appropriate schema consisting of fields like Empno, Name, Designation, DOJ, Department, Salary, Gender, Skills(array)
    1. Insert 7 documents into the above collection.
    2. Display Name, Department, Gender and Salary.
    3. Display the list of employees from the department “HR”.
    4. Display the employee id, name, department and DOB.
    5. Display the employees whose gender is female and designation either “Engineer” or “Scientist”.
    6. Update all those documents where name of employee is “Akash” with the new value of designation as “Engineer”.
    7. Delete all those documents where DOJ is  1st January 1999.
    8. Display the employees whose salary is greater than 25000 and have skills Java or PHP.
    9. Find all the employees having designation “Engineer” and display salary for them.
    10. Display only those documents where the name of employee is “Amit” and designation is “Accountant”.

### 
use EMPLOYEE

-------------------------------------------------------------
1. Insert 7 documents into the above collection.

###
db.EMPLOYEE_MASTER.insertMany([
    {
        _id: 1,
        Name: "Akash",
        Designation: "Analyst",
        DOJ: "1998-12-15",
        Department: "HR",
        Salary: 30000,
        Gender: "Male",
        Skills: ["Java", "PHP"]
    },{
        _id: 2,
        Name: "Amit",
        Designation: "Accountant",
        DOJ: "2000-01-20",
        Department: "Finance",
        Salary: 28000,
        Gender: "Male",
        Skills: ["Excel", "Tally"]
    },{
        _id: 3,
        Name: "Neha",
        Designation: "Engineer",
        DOJ: "2005-07-11",
        Department: "Development",
        Salary: 35000,
        Gender: "Female",
        Skills: ["Java", "Python"]
    },{
        _id: 4,
        Name: "Riya",
        Designation: "Scientist",
        DOJ: "1999-01-01",
        Department: "Research",
        Salary: 40000,
        Gender: "Female",
        Skills: ["Python", "R"]
    },{
        _id: 5,
        Name: "Sunil",
        Designation: "Engineer",
        DOJ: "2003-03-15",
        Department: "Development",
        Salary: 32000,
        Gender: "Male",
        Skills: ["PHP", "JavaScript"]
    },{
        _id: 6,
        Name: "Akash",
        Designation: "Technician",
        DOJ: "2010-10-10",
        Department: "Maintenance",
        Salary: 22000,
        Gender: "Male",
        Skills: ["Hardware", "Networking"]
    },{
        _id: 7,
        Name: "Divya",
        Designation: "Engineer",
        DOJ: "2012-12-12",
        Department: "Development",
        Salary: 38000,
        Gender: "Female",
        Skills: ["Java", "C++"]
    }
])

###
db.EMPLOYEE_MASTER.find()


=============================================================

Create a Student Master database with a collection called “Student” containing
documents with some or all of the following fields: StudentRollNo, StudentName,
Grade, Hobbies, and DOJ.
Perform the following operations on the database:

--------------------------------------------------------------------
use Div_C
db.createCollection("Student")
--------------------------------------------------------------------
a) Insert 10 Records in the database.

db.Student.insert( {_id:1,Rollno:1,StudName:"vijay",Grade:"IV",Hobbies:"Dancing",Doj:"22/05/2020"});
db.Student.insert( {_id:2,Rollno:2,StudName:"Jay",Grade:"IV",Hobbies:"Reading",Doj:"16/01/2020"});
db.Student.insert( {_id:3,Rollno:3,StudName:"Maukesh",Grade:"IVV",Hobbies:"Music",Doj:"01/01/2020"});
db.Student.insert( {_id:4,Rollno:4,StudName:"Anuradha",Grade:"IVV",Hobbies:"Reading",Doj:"16/05/2020"});
db.Student.insert( {_id:5,Rollno:5,StudName:"Ramesh",Grade:"VII",Hobbies:"Chess",Doj:"16/01/2021"});
db.Student.insert( {_id:6,Rollno:6,StudName:"Paresh",Grade:"VII",Hobbies:"Dancing",Doj:"27/12/2020"});
db.Student.insert( {_id:7,Rollno:7,StudName:"Sangeeta",Grade:"VI",Hobbies:"Running",Doj:"26/07/2020"});
db.Student.insert( {_id:8,Rollno:8,StudName:"poojan",Grade:"IVV",Hobbies:"Typing",Doj:"25/03/2020"});
db.Student.insert( {_id:9,Rollno:9,StudName:"Parth",Grade:"VI",Hobbies:"Music",Doj:"16/01/2020"});
db.Student.insert( {_id:10,Rollno:10,StudName:"Vihan",Grade:"IV",Hobbies:"Reading",Doj:"16/02/2021"});
db.Student.insert( {_id:11,Rollno:11,StudName:"Akhay",Grade:"IV",Hobbies:"Chess",Doj:"16/02/2021"});

---------------------------------------------------------------------
b) Find the document where in the “StudName” has value “Akhay”.

> db.Student.find({StudName:"Akhay"})
{ "_id" : 11, "Rollno" : 11, "StudName" : "Akhay", "Grade" : "IV", "Hobbies" : "Chess", "Doj" : "16/02/2021" }
>

---------------------------------------------------------------------
c) Find all documents in proper (like tabular) format. (Without _Id field)

> db.Student.find({},{_id:0,Rollno:1,StudName:1,Grade:1,Hobbies:1,Doj:1}).pretty()
{
        "Rollno" : 1,
        "StudName" : "vijay",
        "Grade" : "IV",
        "Hobbies" : "Dancing",
        "Doj" : "22/05/2020"
}
{
        "Rollno" : 2,
        "StudName" : "Jay",
        "Grade" : "IV",
        "Hobbies" : "Reading",
        "Doj" : "16/01/2020"
}
{
        "Rollno" : 3,
        "StudName" : "Maukesh",
        "Grade" : "IVV",
        "Hobbies" : "Music",
        "Doj" : "01/01/2020"
}
{
        "Rollno" : 4,
        "StudName" : "Anuradha",
        "Grade" : "IVV",
        "Hobbies" : "Reading",
        "Doj" : "16/05/2020"
}
{
        "Rollno" : 5,
        "StudName" : "Ramesh",
        "Grade" : "VII",
        "Hobbies" : "Chess",
        "Doj" : "16/01/2021"
}
{
        "Rollno" : 6,
        "StudName" : "Paresh",
        "Grade" : "VII",
        "Hobbies" : "Dancing",
        "Doj" : "27/12/2020"
}
{
        "Rollno" : 7,
        "StudName" : "Sangeeta",
        "Grade" : "VI",
        "Hobbies" : "Running",
        "Doj" : "26/07/2020"
}
{
        "Rollno" : 8,
        "StudName" : "poojan",
        "Grade" : "IVV",
        "Hobbies" : "Typing",
        "Doj" : "25/03/2020"
}
{
        "Rollno" : 9,
        "StudName" : "Parth",
        "Grade" : "VI",
        "Hobbies" : "Music",
        "Doj" : "16/01/2020"
}
{
        "Rollno" : 10,
        "StudName" : "Vihan",
        "Grade" : "IV",
        "Hobbies" : "Reading",
        "Doj" : "16/02/2021"
}
{
        "Rollno" : 11,
        "StudName" : "Akhay",
        "Grade" : "IV",
        "Hobbies" : "Chess",
        "Doj" : "16/02/2021"
}
>
---------------------------------------------------------------------
d) Retrieve only Student Name and Grade.

> db.Student.find({},{StudName:1,Grade:1})
{ "_id" : 1, "StudName" : "vijay", "Grade" : "IV" }
{ "_id" : 2, "StudName" : "Jay", "Grade" : "IV" }
{ "_id" : 3, "StudName" : "Maukesh", "Grade" : "IVV" }
{ "_id" : 4, "StudName" : "Anuradha", "Grade" : "IVV" }
{ "_id" : 5, "StudName" : "Ramesh", "Grade" : "VII" }
{ "_id" : 6, "StudName" : "Paresh", "Grade" : "VII" }
{ "_id" : 7, "StudName" : "Sangeeta", "Grade" : "VI" }
{ "_id" : 8, "StudName" : "poojan", "Grade" : "IVV" }
{ "_id" : 9, "StudName" : "Parth", "Grade" : "VI" }
{ "_id" : 10, "StudName" : "Vihan", "Grade" : "IV" }
{ "_id" : 11, "StudName" : "Akhay", "Grade" : "IV" }
>
---------------------------------------------------------------------
e) Retrieve Student Name and Grade of student who is having _id column is 1.

> db.Student.find({_id:1},{StudName:1,Grade:1})
{ "_id" : 1, "StudName" : "vijay", "Grade" : "IV" }

---------------------------------------------------------------------
f) Add new field “Address” in Student collection.

> db.Student.updateMany({},{$set:{Address:""}})
{ "acknowledged" : true, "matchedCount" : 11, "modifiedCount" : 11 }

---------------------------------------------------------------------
g) Find those documents where the Grade is set to ‘VII’.

> db.Student.find({Grade:"VII"})
{ "_id" : 5, "Rollno" : 5, "StudName" : "Ramesh", "Grade" : "VII", "Hobbies" : "Chess", "Doj" : "16/01/2021", "Address" : "" }
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020", "Address" : "" }

---------------------------------------------------------------------
h) Find those documents where the Grade is not set to ‘VII’.

> db.Student.find({Grade:{$nin:["VII"]}})
{ "_id" : 1, "Rollno" : 1, "StudName" : "vijay", "Grade" : "IV", "Hobbies" : "Dancing", "Doj" : "22/05/2020", "Address" : "" }
{ "_id" : 2, "Rollno" : 2, "StudName" : "Jay", "Grade" : "IV", "Hobbies" : "Reading", "Doj" : "16/01/2020", "Address" : "" }
{ "_id" : 3, "Rollno" : 3, "StudName" : "Maukesh", "Grade" : "IVV", "Hobbies" : "Music", "Doj" : "01/01/2020", "Address" : "" }
{ "_id" : 4, "Rollno" : 4, "StudName" : "Anuradha", "Grade" : "IVV", "Hobbies" : "Reading", "Doj" : "16/05/2020", "Address" : "" }
{ "_id" : 7, "Rollno" : 7, "StudName" : "Sangeeta", "Grade" : "VI", "Hobbies" : "Running", "Doj" : "26/07/2020", "Address" : "" }
{ "_id" : 8, "Rollno" : 8, "StudName" : "poojan", "Grade" : "IVV", "Hobbies" : "Typing", "Doj" : "25/03/2020", "Address" : "" }
{ "_id" : 9, "Rollno" : 9, "StudName" : "Parth", "Grade" : "VI", "Hobbies" : "Music", "Doj" : "16/01/2020", "Address" : "" }
{ "_id" : 10, "Rollno" : 10, "StudName" : "Vihan", "Grade" : "IV", "Hobbies" : "Reading", "Doj" : "16/02/2021", "Address" : "" }
{ "_id" : 11, "Rollno" : 11, "StudName" : "Akhay", "Grade" : "IV", "Hobbies" : "Chess", "Doj" : "16/02/2021", "Address" : "" }

---------------------------------------------------------------------
i) Find those documents where the Hobbies is set to either ‘Chess’ or is set to
‘Dancing”.

> db.Student.find({Hobbies:{$in:["Dancing","Chess"]}})
{ "_id" : 1, "Rollno" : 1, "StudName" : "vijay", "Grade" : "IV", "Hobbies" : "Dancing", "Doj" : "22/05/2020" }
{ "_id" : 5, "Rollno" : 5, "StudName" : "Ramesh", "Grade" : "VII", "Hobbies" : "Chess", "Doj" : "16/01/2021" }
{ "_id" : 6, "Rollno" : 6, "StudName" : "Paresh", "Grade" : "VII", "Hobbies" : "Dancing", "Doj" : "27/12/2020" }
{ "_id" : 11, "Rollno" : 11, "StudName" : "Akhay", "Grade" : "IV", "Hobbies" : "Chess", "Doj" : "16/02/2021" }

---------------------------------------------------------------------
j) Find those documents where the Hobbies is set neither to ‘Chess’ nor is set to
‘Dancing”.

---------------------------------------------------------------------
k) Find those documents where the student name begins with ‘M’.
 ---------------------------------------------------------------------
l) Find those documents where the student name has an “e” in any position.
---------------------------------------------------------------------
m) Find those documents where the student name ends in “a”.
---------------------------------------------------------------------
n) Find total number of documents.
---------------------------------------------------------------------
o) Find total number of documents where Grade is ‘VII’.
---------------------------------------------------------------------
p) Sort the documents in ascending order of student name.


---------------------------------------------------------------------
q) Display the last two records
---------------------------------------------------------------------